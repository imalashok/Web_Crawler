type: edu
custom_name: stage6
files:
- name: src/crawler/ApplicationRunner.java
  visible: true
  text: |
    package crawler;


    public class ApplicationRunner {
        public static void main(String[] args) {
            new WebCrawler();
        }
    }
  learner_created: false
- name: src/crawler/WebCrawler.java
  visible: true
  text: |-
    package crawler;

    import javax.swing.*;

    public class WebCrawler extends JFrame {
        public WebCrawler() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
        }
    }
  learner_created: false
- name: test/CrawlerTest.java
  visible: false
  text: |
    import common.WebCrawlerStage6Test;

    public class CrawlerTest extends WebCrawlerStage6Test {

    }
  learner_created: false
- name: test/common/WebCrawlerCommonTestGenerator.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<WebCrawlerClue>> {
        return listOf(
            createWebCrawlerTest("Window is not visible") { frameGetter().isVisible.toCheckResult() },
            createWebCrawlerTest("Window title is empty") { frameGetter().title.isNotEmpty().toCheckResult() }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
        val name: String,
        val isEnabled: Boolean,
        private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return createWebCrawlerTest("No suitable component '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return if (requirements.isEnabled) {
                createWebCrawlerTest("'${requirements.name}' should be enabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest component.isEnabled.toCheckResult()
                }
            } else {
                createWebCrawlerTest("'${requirements.name}' should be disabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest (!component.isEnabled).toCheckResult()
                }
            }
        }

        return components.map(::generateIsEnabledTest)
    }
  learner_created: false
- name: test/common/WebCrawlerLocalhostPages.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.mocks.web.WebPage
    import org.hyperskill.hstest.v6.mocks.web.WebServerMock
    import org.hyperskill.hstest.v6.testcase.TestCase

    fun <AttachType> TestCase<AttachType>.withLocalhostPagesOn(port: Int): TestCase<AttachType> {
        val webServerMock = WebServerMock(port).apply {
            pages.forEach { _, (_, content, relativeUrl) ->
                setPage(relativeUrl,
                        WebPage().setContent(content).setContentType("text/html")) }
        }

        return this.runWith(webServerMock)
    }

    data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set<String>)

    val pages = mapOf(
        localhost(PORT, "/exampleDotCom") to PageProperties(
            "Example Domain",
            """<!doctype html>
    <html>
    <head>
        <title>Example Domain</title>

        <meta charset="utf-8" />
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style type="text/css">
        body {
            background-color: #f0f0f2;
            margin: 0;
            padding: 0;
            font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

        }
        div {
            width: 600px;
            margin: 5em auto;
            padding: 50px;
            background-color: #fff;
            border-radius: 1em;
        }
        a:link, a:visited {
            color: #38488f;
            text-decoration: none;
        }
        @media (max-width: 700px) {
            body {
                background-color: #fff;
            }
            div {
                width: auto;
                margin: 0 auto;
                border-radius: 0;
                padding: 1em;
            }
        }
        </style>
    </head>

    <body>
    <div>
        <h1>Example of Example Domain</h1>
        <p>This domain is established to be used for illustrative examples in documents. You may use this
        domain in examples without prior coordination or asking for permission.</p>
        <p><a href="unavailablePage">More information...</a></p>
    </div>
    </body>
    </html>""",
            "/exampleDotCom",
            setOf(localhost(PORT, "/unavailablePage"))
        ),
        localhost(PORT, "/circular1") to PageProperties(
            "circular1tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular1tiTle</title>
                |</head>
                |<body>
                |<a href="circular2">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular1",
            setOf(localhost(PORT, "/circular2"))
        ),
        localhost(PORT, "/circular2") to PageProperties(
            "circular2tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular2tiTle</title>
                |</head>
                |<body>
                |<a href="circular3">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular2",
            setOf(localhost(PORT, "/circular3"))
        ),
        localhost(PORT, "/circular3") to PageProperties(
            "circular3tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular3tiTle</title>
                |</head>
                |<body>
                |<a href="circular1">link</a>
                |<a href="exampleDotCom">link</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular3",
            setOf(localhost(PORT, "/circular1"), localhost(PORT, "/exampleDotCom"))
        )
    )
  learner_created: false
- name: test/common/WebCrawlerStage6Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    import crawler.WebCrawler
    import org.assertj.swing.fixture.*
    import java.io.File

    abstract class WebCrawlerStage6Test : SwingTest<WebCrawlerClue>(WebCrawler()) {

        override fun generate(): List<TestCase<WebCrawlerClue>> {
            val urlText = ComponentRequirements("UrlTextField", isEnabled = true) { window.textBox(it) }
            val getButton = ComponentRequirements("RunButton", isEnabled = true) { window.toggleButton(it) }
            val saveButton = ComponentRequirements("ExportButton", isEnabled = true) { window.button(it) }
            val pathToFileText = ComponentRequirements("ExportUrlTextField", isEnabled = true) { window.textBox(it) }

            val depthText = ComponentRequirements("DepthTextField", isEnabled = true) { window.textBox(it) }
            val depthCheckBox = ComponentRequirements("DepthCheckBox", isEnabled = true) { window.checkBox(it) }
            val parsedLabel = ComponentRequirements("ParsedLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +
                    componentsAreEnabledTests(
                        urlText,
                        getButton,
                        saveButton,
                        pathToFileText,
                        depthText,
                        depthCheckBox,
                        parsedLabel
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 1
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 2
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 100500
                    )
        }

        override fun check(reply: String, clue: WebCrawlerClue): CheckResult {
            return checkWebCrawlerTest(reply = reply, clue = clue)
        }
    }

    fun stage5TestsWithJToggleButton(
            saveButtonRequirements: ComponentRequirements<JButtonFixture>,
            getTextButtonRequirements: ComponentRequirements<JToggleButtonFixture>,
            locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
            savePathTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
            depthTextFieldRequirements: ComponentRequirements<JTextComponentFixture>? = null,
            depthCheckBoxRequirements: ComponentRequirements<JCheckBoxFixture>? = null,
            parsedLabelRequirements: ComponentRequirements<JLabelFixture>? = null,
            depth: Int
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
                createWebCrawlerTest {
                    val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                    val getTextButton = getTextButtonRequirements.requireExistingComponent()
                    val saveButton = saveButtonRequirements.requireExistingComponent()
                    val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()

                    val depthTextField = depthTextFieldRequirements?.requireExistingComponent()
                    val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()
                    val parsedLabel = parsedLabelRequirements?.requireExistingComponent()

                    for (url in pages.keys) {
                        depthTextField?.setText("$depth")
                        depthCheckBox?.enable()

                        locationTextField.setText(url)

                        getTextButton.click()

                        val fileName = File("").absolutePath + "/temp.log"

                        savePathTextField.setText(fileName)

                        saveButton.click()

                        val file = File(fileName)

                        if (!file.exists()) {
                            return@createWebCrawlerTest fail("Your app doesn't create a file")
                        }

                        val contents = file.readText().lines().chunked(2).filter { it.size == 2 }
                        val deepUrls = url.deepUrls(depth)

                        if (contents.size != deepUrls.size) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong lines number")
                        }

                        if (contents.map { it.first() }.toSet() != deepUrls) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong child url")
                        }

                        val parsedCount = parsedLabel?.text()?.toIntOrNull()

                        if (parsedCount != deepUrls.size) {
                            return@createWebCrawlerTest fail("Parsed pages number your app shows is wrong")
                        }

                        for ((writtenUrl, writtenTitle) in contents) {
                            if (!pages.containsKey(writtenUrl)) {
                                return@createWebCrawlerTest fail("Your file contains a link " +
                                        "to the page that is unavailable. " +
                                        "You shouldn't write unavailable links to the file.")
                            }
                            if (pages.getValue(writtenUrl).title != writtenTitle) {
                                return@createWebCrawlerTest fail("File your app saves has a wrong pair of lines")
                            }
                        }
                    }

                    return@createWebCrawlerTest CheckResult(true)
                }.withLocalhostPagesOn(PORT)
        )
    }
  learner_created: false
- name: test/common/WebCrawlerUtil.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.assertj.swing.fixture.JCheckBoxFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    const val PORT = 25555  // TODO: maybe use another port?

    class WebCrawlerClue(val feedback: String?, val checker: () -> CheckResult)

    fun createWebCrawlerTest(feedback: String? = null, checker: () -> CheckResult): TestCase<WebCrawlerClue> {
        return TestCase<WebCrawlerClue>()
            .setAttach(
                WebCrawlerClue(
                    feedback = feedback,
                    checker = checker
                )
            )
    }

    fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {
        return try {
            val (result, feedback) = clue.checker()

            CheckResult(result, clue.feedback ?: feedback)
        } catch (e: AssertionError) {
            CheckResult(false, clue.feedback)
        }
    }

    private operator fun CheckResult.component1() = isCorrect
    private operator fun CheckResult.component2() = feedback

    fun Boolean.toCheckResult() = CheckResult(this)

    fun fail(message: String) = CheckResult(false, message)

    fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {
        fun String.formatted(): String {
            return this.trim().replace("\r\n", "\n").replace("\r", "\n")
        }

        return source.formatted() == inTextField.formatted()
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>> ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }

    fun localhost(port: Int, url: String) = "http://localhost:$port$url"

    fun String.deepUrls(depth: Int): Set<String> {
        return deepUrlsOld(depth) + setOf(this)
    }

    fun String.deepUrlsOld(depth: Int): Set<String> {
        fun String.childrenOrEmpty(): Set<String> {
            val pageProperties = pages[this]

            if (depth < 0 || pageProperties == null) {
                return emptySet()
            }

            return pageProperties.childUrls.filter { it in pages }.toSet()
        }

        var remainingDepth = depth - 1
        val answer = this.childrenOrEmpty().toMutableSet()
        while (remainingDepth > 0) {
            val next = answer.flatMap { it.childrenOrEmpty() } - answer

            if (next.isEmpty()) {
                break
            }

            answer.addAll(next)

            --remainingDepth
        }

        return answer
    }

    fun JCheckBoxFixture.enable() {
        if (!this.isEnabled) {
            this.click()
        }
    }
  learner_created: false
- name: src/crawler/HtmlLinksParserAlgorithm.java
  visible: true
  text: |
    package crawler;

    import java.io.BufferedInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.net.HttpURLConnection;
    import java.net.URL;
    import java.net.URLConnection;
    import java.nio.charset.StandardCharsets;
    import java.util.LinkedHashMap;
    import java.util.Map;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class HtmlLinksParserAlgorithm {
        public static Map<String, String> parseAllHtmlLinksInURL(String url) throws IOException {
            Map<String, String> htmlLinks = new LinkedHashMap<>();
            String shortUrl = "" + url;
            if (url.matches("https?://.*/.*")) {
                shortUrl = url.substring(0, url.lastIndexOf("/") + 1);
                System.out.println(shortUrl);
            }
            String domainUrl = shortUrl.replaceAll("https?://", "");
            String siteText = "";
            String urlPrefix = shortUrl.startsWith("https") ? "https://" : "http://";
            boolean isUrlEndsWithBackSlash = shortUrl.endsWith("/");

            //System.out.println("url = " + url); //for debug

            URL urlLink = new URL(url);
            URLConnection urlConnection = urlLink.openConnection();
            urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0");
            String urlContentType = urlConnection.getContentType();

            HttpURLConnection huc = (HttpURLConnection) urlLink.openConnection(); //check 404 links
            huc.setRequestMethod("GET");
            huc.connect();


            System.out.println(urlConnection.getContentType());
            int urlResponse = huc.getResponseCode();
            System.out.println(urlResponse);

            if (urlResponse < 400 && urlContentType != null && urlContentType.startsWith("text/html")) {
                InputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
                siteText = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
                htmlLinks.put(url, getSiteTitle(siteText));
            }

            Pattern pattern = Pattern.compile("(?<=href=\").*?(?=\\s)");
            Matcher matcher = pattern.matcher(siteText);

            while (matcher.find()) {

                String htmlLink = matcher.group();
                System.out.println(htmlLink); //for debug

                /** The link can be presented in many ways:

                 An absolute link like https://www.wikipedia.org/index.html.
                 A relative link like page.html. It doesn't contain slashes. To get an absolute link you should cut the original link to the last slash and add this relative link: https://www.wikipedia.org/index.html=> page.html = https://www.wikipedia.org/page.html.
                 A link without protocol like //en.wikipedia.org/ or en.wikipedia.org/. Here you need just to add protocol of original page: http or https.

                 If statements below handle different types of the links explained above*/

                if (htmlLink.length() > 3 && !htmlLink.contains("@")) { //to skip empty tags, e.g. "#" or "/"
                    if (htmlLink.startsWith("http")) {
                        htmlLink = htmlLink.replaceFirst("[\"'][\\w\\W]*$", "");
                    } else if (/*!htmlLink.contains(".") ||*/ !htmlLink.contains(domainUrl)) {
                        if (isUrlEndsWithBackSlash) {
                            htmlLink = htmlLink.replaceFirst("^", shortUrl).replaceFirst("[\"'][\\w\\W]*$", "");
                        } else {
                            htmlLink = htmlLink.replaceFirst("^", shortUrl + "/").replaceFirst("[\"'][\\w\\W]*$", "");
                        }
                    } else if (htmlLink.startsWith("/")) {
                        htmlLink = htmlLink.replaceFirst("^/{1,2}", urlPrefix).replaceFirst("[\"'][\\w\\W]*$", "");
                    } else {
                        if (isUrlEndsWithBackSlash) {
                            htmlLink = htmlLink.replaceFirst("^", shortUrl).replaceFirst("[\"'][\\w\\W]*$", "");
                        } else {
                            htmlLink = htmlLink.replaceFirst("^", shortUrl + "/").replaceFirst("[\"'][\\w\\W]*$", "");
                        }
                    }
                    //System.out.println("htmlLink = " + htmlLink); //for debug

                    siteText = getSiteText(htmlLink);

                    if (siteText != null) {
                        htmlLinks.put(htmlLink, getSiteTitle(siteText));
                    }
                }
            }

            //System.out.println(htmlLinks); for debug


            return htmlLinks;
        }


        public static String getSiteText(String url) throws IOException {
            String siteText;

            URL urlLink = new URL(url);
            URLConnection urlConnection = urlLink.openConnection();
            urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0");
            String urlContentType = urlConnection.getContentType();


            HttpURLConnection huc = (HttpURLConnection) urlLink.openConnection(); //check 404 links
            huc.setRequestMethod("GET");
            huc.connect();
            int urlResponse = huc.getResponseCode();

            System.out.println(urlConnection.getContentType());
            System.out.println(huc.getResponseCode());


            if (urlResponse < 400 && urlContentType != null && urlContentType.startsWith("text/html")) {
                InputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
                siteText = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
                return siteText;
            }

            return null;
        }


        public static String getSiteTitle(String siteText) {
            Pattern pattern = Pattern.compile("<title>\\s*.*?\\s*.*?</title>");
            Matcher matcher = pattern.matcher(siteText);
            String siteTitle = "NoTitle";

            if (matcher.find()) {
                siteTitle = matcher.group().replaceAll("</?title>", "").trim();
            }

            return siteTitle;
        }
    }
  learner_created: true
- name: src/crawler/ThreadWorker.java
  visible: true
  learner_created: true
- name: temp.log
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/59/stages/322/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/59/stages/322/implement">JetBrains
    Academy</a>
  time: Sun, 16 Aug 2020 22:18:09 UTC
record: -1
